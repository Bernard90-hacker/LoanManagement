@{
	TempData.Keep();
	Layout = "_CommonMasterLayout";

	TempData["menuHorizontal"] = false;
	ViewData["contentNavbar"] = false;

	@* Display elements *@
	ViewData["isNavbar"] = (ViewData["isNavbar"] ??= true);
	ViewData["isMenu"] = (ViewData["isMenu"] ??= true);
	ViewData["isFlex"] = (ViewData["isFlex"] ??= false);
	ViewData["isFooter"] = (ViewData["isFooter"] ??= true);
	//ViewData["customizerHidden"] = (ViewData["customizerHidden"] ??= "customizer-hide");

	@* HTML Classes *@
	ViewData["navbarDetached"] = (ViewData["navbarDetached"] ?? "navbar-detached");
	ViewData["menuFixed"] = (ViewData["menuFixed"] ?? "layout-menu-fixed");
	ViewData["navbarFixed"] = (ViewData["navbarFixed"] ?? "layout-navbar-fixed");
	//ViewData["footerFixed"] = (ViewData["footerFixed"] ?? "layout-footer-fixed");
	//ViewData["menuCollapsed"] = (ViewData["menuCollapsed"] ?? "layout-menu-collapsed");

	@* Content classes *@
	ViewData["container"] = (ViewData["container"] ?? "container-xxl");
	ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-xxl");
}

@section VendorStyles {
	@RenderSection("VendorStyles", required: false)
}

@section PageStyles {
	@RenderSection("PageStyles", required: false)
}

@section VendorScripts {
	@RenderSection("VendorScripts", required: false)
}

@section PageScripts {
	@RenderSection("PageScripts", required: false)
}

@{
	bool isMenu = ViewData["isMenu"] != null && Convert.ToBoolean(ViewData["isMenu"]);
}

<div class='layout-wrapper layout-content-navbar @(isMenu ? "" : "layout-without-menu")'>
	<div class='layout-container'>
		<!-- Menu -->
		@if (isMenu)
		{
			@await Html.PartialAsync("Sections/Menu/_VerticalMenu")
		}
		<!-- / Menu -->
		<!-- Page de mise en page -->
		<div class="layout-page">
			<!-- Navbar -->
			@if (@ViewData["isNavbar"] != null && Convert.ToBoolean(@ViewData["isNavbar"]))
			{
				@await Html.PartialAsync("Sections/Navbar/_Navbar")
			}
			<!-- / Navbar -->
			<!-- Enveloppe de contenu -->
			<div class="content-wrapper">
				<!-- Contenu -->
				<div class='@ViewData["container"] @((Convert.ToBoolean(@ViewData["isFlex"])) ? "d-flex align-items-stretch flex-grow-1 p-0" : "flex-grow-1 container-p-y")'>
					@RenderBody()
				</div>
				<!-- / Contenu -->
				<!-- Pied de page -->
				@if (@ViewData["isFooter"] != null && Convert.ToBoolean(@ViewData["isFooter"]))
				{
					@await Html.PartialAsync("Sections/Footer/_Footer")
				}
				<!-- / Pied de page -->
				@{
					await Html.RenderPartialAsync("_ValidationScriptsPartial");
				}
				<div class="content-backdrop fade"></div>
			</div>
			<!--/ Enveloppe de contenu -->
		</div>
		<!-- / Page de mise en page -->
	</div>

	<!-- Superposition -->
	@if (@ViewData["isMenu"] != null && Convert.ToBoolean(@ViewData["isMenu"]))
	{
		<div class="layout-overlay layout-menu-toggle"></div>
	}
	<!-- Faire glisser la zone cible vers le menu SlideIn sur les petits écrans -->
	<div class="drag-target"></div>
</div>
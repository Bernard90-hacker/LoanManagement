// <auto-generated />
using System;
using LoanManagement.Data.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LoanManagement.Data.SqlServer.Migrations
{
    [DbContext(typeof(LoanManagementDbContext))]
    [Migration("20230901171828_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LoanManagement.Data.SqlServer.Configuration.Loan_Management.ParametrageFraisDossier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("FraisDossiers")
                        .HasColumnType("float");

                    b.Property<double>("FraisFixe")
                        .HasColumnType("float");

                    b.Property<double>("Plafond")
                        .HasColumnType("float");

                    b.Property<double>("Plancher")
                        .HasColumnType("float");

                    b.Property<int>("PourcentageCommissionEngagement")
                        .HasColumnType("int");

                    b.Property<int>("PourcentageTAF")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ParametrageFraisDossiers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FraisDossiers = 0.0,
                            FraisFixe = 0.0,
                            Plafond = 100000.0,
                            Plancher = 1.0,
                            PourcentageCommissionEngagement = 0,
                            PourcentageTAF = 0
                        },
                        new
                        {
                            Id = 2,
                            FraisDossiers = 10000.0,
                            FraisFixe = 1000.0,
                            Plafond = 1000000.0,
                            Plancher = 500001.0,
                            PourcentageCommissionEngagement = 25,
                            PourcentageTAF = 10
                        },
                        new
                        {
                            Id = 3,
                            FraisDossiers = 5000.0,
                            FraisFixe = 1000.0,
                            Plafond = 500000.0,
                            Plancher = 100001.0,
                            PourcentageCommissionEngagement = 25,
                            PourcentageTAF = 10
                        },
                        new
                        {
                            Id = 4,
                            FraisDossiers = 25000.0,
                            FraisFixe = 1000.0,
                            Plafond = 2000000.0,
                            Plancher = 1000001.0,
                            PourcentageCommissionEngagement = 25,
                            PourcentageTAF = 10
                        },
                        new
                        {
                            Id = 5,
                            FraisDossiers = 50000.0,
                            FraisFixe = 1000.0,
                            Plafond = 5000000.0,
                            Plancher = 2000001.0,
                            PourcentageCommissionEngagement = 25,
                            PourcentageTAF = 10
                        },
                        new
                        {
                            Id = 6,
                            FraisDossiers = 65000.0,
                            FraisFixe = 1000.0,
                            Plafond = 0.0,
                            Plancher = 5000001.0,
                            PourcentageCommissionEngagement = 25,
                            PourcentageTAF = 10
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdressePostale")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateNaissance")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Indice")
                        .HasColumnType("int");

                    b.Property<string>("LieuNaissance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Prenoms")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quartier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Indice")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdressePostale = "99",
                            DateNaissance = "07/10/2002",
                            Email = "attiogbegodwin2002@gmail.com",
                            Indice = 310,
                            LieuNaissance = "Lomé",
                            Nom = "ATTIOGBE",
                            Prenoms = "Godwin",
                            Profession = "Etudiant",
                            Quartier = "ABLOGAME",
                            Residence = "WOGLO",
                            Tel = "70556049",
                            Ville = "Lomé"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Compte", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroCompte")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<double>("Solde")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(0.0);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("NumeroCompte")
                        .IsUnique();

                    b.ToTable("Comptes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            NumeroCompte = "121212121212",
                            Solde = 0.0
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Deroulement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NiveauInstance")
                        .HasColumnType("int");

                    b.Property<double>("Plafond")
                        .HasColumnType("float");

                    b.Property<double>("Plancher")
                        .HasColumnType("float");

                    b.Property<int>("TypePretId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypePretId");

                    b.ToTable("Deroulements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Config d'un premier déroulement",
                            Libelle = "premier deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Config d'un deuxième déroulement",
                            Libelle = "deuxième deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 2
                        },
                        new
                        {
                            Id = 3,
                            Description = "Config d'un troisième déroulement",
                            Libelle = "troisième deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 3
                        },
                        new
                        {
                            Id = 4,
                            Description = "Config d'un quatrième déroulement",
                            Libelle = "quatrième deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Config d'un cinquième déroulement",
                            Libelle = "cinquième deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 5
                        },
                        new
                        {
                            Id = 6,
                            Description = "Config d'un sixième déroulement",
                            Libelle = "sixième deroulement",
                            NiveauInstance = 1,
                            Plafond = 100000000.0,
                            Plancher = 1.0,
                            TypePretId = 6
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.DossierClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttestationTravail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Buveur")
                        .HasColumnType("int");

                    b.Property<string>("CarteIdentite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategorieSport")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<bool>("Cloturer")
                        .HasColumnType("bit");

                    b.Property<string>("ContratTravail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CouvertureEmprunteur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateCloture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSoumission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateSurvenance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeuxiemeBulletinSalaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Distractions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EcheanceCarteIdentite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EstInfirme")
                        .HasColumnType("bit");

                    b.Property<bool>("EstSportif")
                        .HasColumnType("bit");

                    b.Property<string>("FactureProFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Fumeur")
                        .HasColumnType("bit");

                    b.Property<double>("Montant")
                        .HasColumnType("float");

                    b.Property<string>("NatureInfirmite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NbrCigarettes")
                        .HasColumnType("int");

                    b.Property<string>("NumeroDossier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Poids")
                        .HasColumnType("float");

                    b.Property<string>("PremierBulletinSalaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatutMaritalId")
                        .HasColumnType("int");

                    b.Property<double>("Taille")
                        .HasColumnType("float");

                    b.Property<string>("TensionArterielle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TroisiemeBulletinSalaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("StatutMaritalId");

                    b.ToTable("DossierClients", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Employeur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BoitePostale")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BoitePostale")
                        .IsUnique();

                    b.HasIndex("Tel")
                        .IsUnique();

                    b.ToTable("Employeurs", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.EtapeDeroulement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeroulementId")
                        .HasColumnType("int");

                    b.Property<int>("Etape")
                        .HasColumnType("int");

                    b.Property<int>("MembreOrganeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeroulementId");

                    b.HasIndex("Id");

                    b.HasIndex("MembreOrganeId");

                    b.ToTable("EtapeDeroulements", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.InfoSanteClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DossierClientId")
                        .HasColumnType("int");

                    b.Property<int>("DureeTraitement")
                        .HasColumnType("int");

                    b.Property<string>("LieuTraitement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NatureQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("PeriodeTraitement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReponseBoolenne")
                        .HasColumnType("bit");

                    b.Property<string>("ReponsePrecision")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DossierClientId");

                    b.HasIndex("NatureQuestionId");

                    b.ToTable("InfoSanteClients", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.MembreOrgane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganeDecisionId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganeDecisionId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("MembreOrganes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Membre gestionnaire",
                            OrganeDecisionId = 1,
                            UtilisateurId = 2
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.NatureQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("NatureQuestions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Avez-vous été malade au cours des 6 derniers mois ?"
                        },
                        new
                        {
                            Id = 2,
                            Libelle = "Êtes vous souvent fatigué (e)?"
                        },
                        new
                        {
                            Id = 3,
                            Libelle = "Avez-vous maigri les 6 derniers mois ?"
                        },
                        new
                        {
                            Id = 4,
                            Libelle = "Avez-vous des ganglions, des furoncles, des abcès ou des maladies de la peau ?"
                        },
                        new
                        {
                            Id = 5,
                            Libelle = "Toussez-vous depuis quelque temps avec en plus de la fièvre ?"
                        },
                        new
                        {
                            Id = 6,
                            Libelle = "Avez-vous des plaies dans la bouche ?"
                        },
                        new
                        {
                            Id = 7,
                            Libelle = "Faites-vous souvent la diarrhée ?"
                        },
                        new
                        {
                            Id = 8,
                            Libelle = "Êtes vous souvent ballonné (e) ?"
                        },
                        new
                        {
                            Id = 9,
                            Libelle = "Avez-vous des OEdèmes des Membres Inférieurs (O.M.I) ?"
                        },
                        new
                        {
                            Id = 10,
                            Libelle = "Êtes vous essoufflé (e) au moindre effort ?"
                        },
                        new
                        {
                            Id = 11,
                            Libelle = "Avez-vous déjà reçu une perfusion ?"
                        },
                        new
                        {
                            Id = 12,
                            Libelle = "Avez-vous déjà reçu une transfusion de sang ?"
                        },
                        new
                        {
                            Id = 13,
                            Libelle = "Avez-vous déjà subi une opération ?"
                        },
                        new
                        {
                            Id = 14,
                            Libelle = "Avez-vous des informations complémentaires sur votre état de santé susceptibles de renseignerl'assureur ?"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.OrganeDecision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrganeDecisions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Gestionnaire"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.PeriodicitePaiement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PeriodicitePaiements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Unique"
                        },
                        new
                        {
                            Id = 2,
                            Libelle = "Mensuelle"
                        },
                        new
                        {
                            Id = 3,
                            Libelle = "Annuelle"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.PretAccord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateDepartRetraite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateDerniereEcheance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DatePremiereEcheance")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DossierClientId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeurId")
                        .HasColumnType("int");

                    b.Property<double>("Mensualite")
                        .HasColumnType("float");

                    b.Property<double>("MontantPret")
                        .HasColumnType("float");

                    b.Property<double>("MontantPrime")
                        .HasColumnType("float");

                    b.Property<int>("PeriodicitePaiementId")
                        .HasColumnType("int");

                    b.Property<double>("PrimeTotale")
                        .HasColumnType("float");

                    b.Property<double>("QuotiteCessible")
                        .HasColumnType("float");

                    b.Property<double>("SalaireNetMensuel")
                        .HasColumnType("float");

                    b.Property<double>("Surprime")
                        .HasColumnType("float");

                    b.Property<int>("TauxEngagement")
                        .HasColumnType("int");

                    b.Property<int>("TypePretId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DossierClientId")
                        .IsUnique();

                    b.HasIndex("EmployeurId");

                    b.HasIndex("PeriodicitePaiementId");

                    b.HasIndex("TypePretId");

                    b.ToTable("PretAccords", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.RoleOrgane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DureeTraitement")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganeDecisionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrganeDecisionId");

                    b.ToTable("RoleOrganes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DureeTraitement = 24,
                            Libelle = "Instruction de dossiers",
                            OrganeDecisionId = 1
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.StatutDossierClient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateReception")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DecisionFinale")
                        .HasColumnType("bit");

                    b.Property<int>("DossierClientId")
                        .HasColumnType("int");

                    b.Property<int>("EtapeDeroulementId")
                        .HasColumnType("int");

                    b.Property<string>("Motif")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DossierClientId");

                    b.HasIndex("EtapeDeroulementId");

                    b.ToTable("StatutDossierClients");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.StatutMarital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatutMaritals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Célibataire"
                        },
                        new
                        {
                            Id = 2,
                            Libelle = "Divorcé(e)"
                        },
                        new
                        {
                            Id = 3,
                            Libelle = "Marié(e)"
                        },
                        new
                        {
                            Id = 4,
                            Libelle = "Divorcé(e)"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.TypePret", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypePrets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Libelle = "Court terme (1 à 2 ans)"
                        },
                        new
                        {
                            Id = 2,
                            Libelle = "Court terme (2 à 4 ans)"
                        },
                        new
                        {
                            Id = 3,
                            Libelle = "Découvert"
                        },
                        new
                        {
                            Id = 4,
                            Libelle = "Crédit Moyen Terme"
                        },
                        new
                        {
                            Id = 5,
                            Libelle = "C.D.M.H"
                        },
                        new
                        {
                            Id = 6,
                            Libelle = "Autre Prêt Immobilier"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateModification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Applications", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Departement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("DirectionId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("DirectionId");

                    b.ToTable("Departements", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "ETUDEV",
                            DirectionId = 1,
                            Libelle = "Etudes et développement"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EXPL",
                            DirectionId = 1,
                            Libelle = "Exploitation"
                        },
                        new
                        {
                            Id = 3,
                            Code = "ORG",
                            DirectionId = 1,
                            Libelle = "Organisation"
                        },
                        new
                        {
                            Id = 4,
                            Code = "CLI",
                            DirectionId = 2,
                            Libelle = "Chargé clientèle"
                        },
                        new
                        {
                            Id = 5,
                            Code = "ANL",
                            DirectionId = 2,
                            Libelle = "Analyse"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Direction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Directions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "DSIOSI",
                            Libelle = "Direction informatique"
                        },
                        new
                        {
                            Id = 2,
                            Code = "DRC",
                            Libelle = "Direction commerciale"
                        },
                        new
                        {
                            Id = 3,
                            Code = "GGE",
                            Libelle = "Direction gestion des engagements"
                        },
                        new
                        {
                            Id = 4,
                            Code = "GGR",
                            Libelle = "Direction gestion globale des risques."
                        },
                        new
                        {
                            Id = 5,
                            Code = "GAR",
                            Libelle = "Direction rédaction des garanties."
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Employe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateModification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<int>("DepartementId")
                        .HasColumnType("int");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenoms")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartementId");

                    b.HasIndex("Matricule")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAjout = "01/09/2023",
                            DateModification = "01/09/2023",
                            DepartementId = 1,
                            Matricule = "6060",
                            Nom = "KEOULA",
                            Prenoms = "Lonlon Edem",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            DateAjout = "01/09/2023",
                            DateModification = "01/09/2023",
                            DepartementId = 4,
                            Matricule = "6061",
                            Nom = "Bhazou",
                            Prenoms = "Bhazou",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.HabilitationProfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateModification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Edition")
                        .HasColumnType("bit");

                    b.Property<bool>("Generation")
                        .HasColumnType("bit");

                    b.Property<bool>("Insertion")
                        .HasColumnType("bit");

                    b.Property<bool>("Modification")
                        .HasColumnType("bit");

                    b.Property<int>("ProfilId")
                        .HasColumnType("int");

                    b.Property<bool>("Suppression")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ProfilId")
                        .IsUnique();

                    b.ToTable("HabilitationProfils", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAjout = "01/09/2023",
                            DateModification = "",
                            Edition = true,
                            Generation = true,
                            Insertion = true,
                            Modification = true,
                            ProfilId = 1,
                            Suppression = true
                        },
                        new
                        {
                            Id = 2,
                            DateAjout = "01/09/2023",
                            DateModification = "",
                            Edition = true,
                            Generation = false,
                            Insertion = true,
                            Modification = true,
                            ProfilId = 2,
                            Suppression = false
                        },
                        new
                        {
                            Id = 3,
                            DateAjout = "01/09/2023",
                            DateModification = "",
                            Edition = true,
                            Generation = false,
                            Insertion = true,
                            Modification = true,
                            ProfilId = 3,
                            Suppression = false
                        },
                        new
                        {
                            Id = 4,
                            DateAjout = "01/09/2023",
                            DateModification = "",
                            Edition = true,
                            Generation = false,
                            Insertion = true,
                            Modification = true,
                            ProfilId = 4,
                            Suppression = false
                        },
                        new
                        {
                            Id = 5,
                            DateAjout = "01/09/2023",
                            DateModification = "",
                            Edition = true,
                            Generation = false,
                            Insertion = true,
                            Modification = true,
                            ProfilId = 5,
                            Suppression = false
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DateOperation")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateSysteme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Entite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IPAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Machine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MethodeHTTP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Navigateur")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Niveau")
                        .HasColumnType("int");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Peripherique")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferenceURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeJournalId")
                        .HasColumnType("int");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeJournalId");

                    b.ToTable("Journaux", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateModification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HabilitationProfilId")
                        .HasColumnType("int");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("HabilitationProfilId");

                    b.HasIndex("MenuId");

                    b.ToTable("Menus", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.MotDePasse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("OldPasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("OldPasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("MotDePasses", (string)null);
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.ParamGlobal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DelaiExpiration")
                        .HasColumnType("int");

                    b.Property<bool>("ExcludeUsername")
                        .HasColumnType("bit");

                    b.Property<string>("FromPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IncludeDigits")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeLowerCase")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeSpecialCharacters")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeUpperCase")
                        .HasColumnType("bit");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("SmtpClient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SmtpName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Taille")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ParamGlobals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DelaiExpiration = 6,
                            ExcludeUsername = true,
                            FromPassword = "",
                            IncludeDigits = true,
                            IncludeLowerCase = true,
                            IncludeSpecialCharacters = true,
                            IncludeUpperCase = true,
                            Port = 0,
                            SmtpClient = "",
                            SmtpEmail = "",
                            SmtpName = "",
                            Taille = 8
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Profil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateExpiration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateModification")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Profils", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PROFIL-001",
                            DateAjout = "01/09/2023",
                            DateExpiration = "01/09/2024",
                            DateModification = "",
                            Description = "Profil destiné à l'administrateur",
                            Libelle = "Administrateur",
                            Statut = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "PROFIL-002",
                            DateAjout = "01/09/2023",
                            DateExpiration = "01/09/2024",
                            DateModification = "",
                            Description = "Profil destiné aux au gestionnaire",
                            Libelle = "Gestionnaire",
                            Statut = 1
                        },
                        new
                        {
                            Id = 3,
                            Code = "PROFIL-003",
                            DateAjout = "01/09/2023",
                            DateExpiration = "01/09/2024",
                            DateModification = "",
                            Description = "Profil destiné à l'analyste",
                            Libelle = "Analyste",
                            Statut = 1
                        },
                        new
                        {
                            Id = 4,
                            Code = "PROFIL-004",
                            DateAjout = "01/09/2023",
                            DateExpiration = "01/09/2024",
                            DateModification = "",
                            Description = "Profil destiné au directeur de la GGR",
                            Libelle = "Directeur GGR",
                            Statut = 1
                        },
                        new
                        {
                            Id = 5,
                            Code = "PROFIL-005",
                            DateAjout = "01/09/2023",
                            DateExpiration = "01/09/2024",
                            DateModification = "",
                            Description = "Profil destiné aux utilisateurs",
                            Libelle = "Chef Departement Back-Office Engagement",
                            Statut = 1
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.TypeJournal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TypeJournaux", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "CONN",
                            Libelle = "Connexion",
                            Statut = 0
                        },
                        new
                        {
                            Id = 2,
                            Code = "DECONN",
                            Libelle = "Déconnexion",
                            Statut = 0
                        },
                        new
                        {
                            Id = 3,
                            Code = "UPDATE",
                            Libelle = "Modification de données",
                            Statut = 0
                        },
                        new
                        {
                            Id = 4,
                            Code = "DELETE",
                            Libelle = "Suppression des données",
                            Statut = 0
                        },
                        new
                        {
                            Id = 5,
                            Code = "ADD",
                            Libelle = "Ajout de données",
                            Statut = 0
                        },
                        new
                        {
                            Id = 6,
                            Code = "GETBYID",
                            Libelle = "Rechercher un objet par son id",
                            Statut = 0
                        },
                        new
                        {
                            Id = 7,
                            Code = "GETBYCODE",
                            Libelle = "Rechercher un objet par son code",
                            Statut = 0
                        },
                        new
                        {
                            Id = 8,
                            Code = "GET",
                            Libelle = "Récupération de données",
                            Statut = 0
                        },
                        new
                        {
                            Id = 9,
                            Code = "MNT",
                            Libelle = "Montage de dossier crédit",
                            Statut = 0
                        },
                        new
                        {
                            Id = 10,
                            Code = "GEN",
                            Libelle = "Génération de fiches d'assurance",
                            Statut = 0
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateAjout")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)")
                        .HasDefaultValue("01/09/2023");

                    b.Property<string>("DateDesactivation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DateExpirationCompte")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("DateModificationMotDePasse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConnected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEditPassword")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuperAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("ProfilId")
                        .HasColumnType("int");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProfilId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Utilisateurs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateAjout = "01/09/2023",
                            DateDesactivation = "20/08/2025",
                            DateExpirationCompte = "20/08/2025",
                            DateModificationMotDePasse = "01/09/2023",
                            Email = "ekeoula@gmail.com",
                            IsAdmin = true,
                            IsConnected = false,
                            IsEditPassword = true,
                            IsSuperAdmin = true,
                            PasswordHash = "43B6FE4F85C1E392D1F7341EC43164B37FC57DF19B936200AD735A0255D619A644EA6280E5FAC80C6190ABBB1C0832DC1239BE7911FE724BCB90B16ADBBA55CF",
                            PasswordSalt = new byte[] { 2, 38, 34, 52, 8, 114, 251, 11, 139, 162, 152, 133, 87, 122, 80, 18, 161, 1, 249, 5, 6, 128, 56, 183, 35, 43, 51, 228, 103, 206, 80, 120, 135, 163, 108, 97, 107, 214, 124, 76, 95, 98, 6, 192, 155, 38, 178, 138, 136, 129, 131, 214, 237, 89, 162, 124, 73, 45, 161, 133, 179, 153, 11, 69 },
                            ProfilId = 1,
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6IkFkbWluIiwibmJmIjoxNjkzNTg4NzA4LCJleHAiOjE2OTQxOTM1MDh9.eUQhoKks4oDiMIZG6KnZL1Dmmm-ox3skotPpT4Sucq4",
                            RefreshTokenTime = "08/09/2023",
                            Statut = 1,
                            Username = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            DateAjout = "01/09/2023",
                            DateDesactivation = "21/08/2025",
                            DateExpirationCompte = "20/08/2025",
                            DateModificationMotDePasse = "01/09/2023",
                            Email = "bhazou@biat.tg",
                            IsAdmin = false,
                            IsConnected = false,
                            IsEditPassword = true,
                            IsSuperAdmin = false,
                            PasswordHash = "9D9B4DF8B59F183A72E0D3896CDB15548390C15CE4FCF93F73463CA14E28BED81A2C4BD94D67E24208659D4D56EEB6C5173FC95E0A2073B9511CF5E93480F6C0",
                            PasswordSalt = new byte[] { 89, 11, 30, 108, 162, 42, 120, 131, 214, 101, 129, 212, 247, 127, 62, 125, 186, 119, 75, 213, 254, 167, 25, 28, 31, 150, 201, 95, 106, 129, 180, 149, 76, 235, 146, 64, 248, 47, 188, 78, 105, 213, 2, 79, 157, 187, 194, 92, 150, 35, 128, 182, 2, 1, 46, 91, 196, 117, 203, 188, 147, 1, 86, 173 },
                            ProfilId = 2,
                            RefreshToken = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy93cy8yMDA1LzA1L2lkZW50aXR5L2NsYWltcy9uYW1laWRlbnRpZmllciI6Indhem91IiwibmJmIjoxNjkzNTg4NzA4LCJleHAiOjE2OTQxOTM1MDh9.5mYPc5drhBmphqzWHedopE1ZuIt2ZJmeRDf4Qph9UmE",
                            RefreshTokenTime = "08/09/2023",
                            Statut = 1,
                            Username = "bhazou"
                        });
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Compte", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Deroulement", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.TypePret", "TypePret")
                        .WithMany("Deroulements")
                        .HasForeignKey("TypePretId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypePret");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.DossierClient", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.Client", "Client")
                        .WithMany("DossierClients")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.StatutMarital", "StatutMarital")
                        .WithMany("Dossiers")
                        .HasForeignKey("StatutMaritalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("StatutMarital");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.EtapeDeroulement", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.Deroulement", "Deroulement")
                        .WithMany("Etapes")
                        .HasForeignKey("DeroulementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.MembreOrgane", "MembreOrgane")
                        .WithMany()
                        .HasForeignKey("MembreOrganeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Deroulement");

                    b.Navigation("MembreOrgane");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.InfoSanteClient", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.DossierClient", "Dossier")
                        .WithMany("InfoSanteClients")
                        .HasForeignKey("DossierClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.NatureQuestion", "NatureQuestion")
                        .WithMany("InfoSanteClient")
                        .HasForeignKey("NatureQuestionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("NatureQuestion");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.MembreOrgane", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.OrganeDecision", "OrganeDecision")
                        .WithMany("Membres")
                        .HasForeignKey("OrganeDecisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Users_Management.Utilisateur", "Utilisateur")
                        .WithMany("Membres")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganeDecision");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.PretAccord", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.DossierClient", "Dossier")
                        .WithOne("PretAccord")
                        .HasForeignKey("LoanManagement.core.Models.Loan_Management.PretAccord", "DossierClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.Employeur", "Employeur")
                        .WithMany("PretAccords")
                        .HasForeignKey("EmployeurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.PeriodicitePaiement", "PeriodicitePaiement")
                        .WithMany("PretAccords")
                        .HasForeignKey("PeriodicitePaiementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.TypePret", "TypePret")
                        .WithMany("PretAccords")
                        .HasForeignKey("TypePretId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("Employeur");

                    b.Navigation("PeriodicitePaiement");

                    b.Navigation("TypePret");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.RoleOrgane", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.OrganeDecision", "OrganeDecision")
                        .WithMany("Roles")
                        .HasForeignKey("OrganeDecisionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrganeDecision");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.StatutDossierClient", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Loan_Management.DossierClient", "Dossier")
                        .WithMany("Status")
                        .HasForeignKey("DossierClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Loan_Management.EtapeDeroulement", "EtapeDeroulement")
                        .WithMany("Statuts")
                        .HasForeignKey("EtapeDeroulementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dossier");

                    b.Navigation("EtapeDeroulement");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Departement", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Direction", "Direction")
                        .WithMany("Departements")
                        .HasForeignKey("DirectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Direction");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Employe", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Departement", "Departement")
                        .WithMany("Employes")
                        .HasForeignKey("DepartementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Users_Management.Utilisateur", "User")
                        .WithOne("Employe")
                        .HasForeignKey("LoanManagement.core.Models.Users_Management.Employe", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Departement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.HabilitationProfil", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Profil", "Profil")
                        .WithOne("Habilitation")
                        .HasForeignKey("LoanManagement.core.Models.Users_Management.HabilitationProfil", "ProfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profil");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Journal", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.TypeJournal", "TypeJournal")
                        .WithMany("Journaux")
                        .HasForeignKey("TypeJournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeJournal");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Menu", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Application", "Application")
                        .WithMany("Menus")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Users_Management.HabilitationProfil", "HabilitationProfil")
                        .WithMany("Menus")
                        .HasForeignKey("HabilitationProfilId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LoanManagement.core.Models.Users_Management.Menu", null)
                        .WithMany("SousMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Application");

                    b.Navigation("HabilitationProfil");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.MotDePasse", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Utilisateur", "Utilisateur")
                        .WithMany("Passwords")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Utilisateur", b =>
                {
                    b.HasOne("LoanManagement.core.Models.Users_Management.Profil", "Profil")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("ProfilId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Profil");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Client", b =>
                {
                    b.Navigation("Comptes");

                    b.Navigation("DossierClients");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Deroulement", b =>
                {
                    b.Navigation("Etapes");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.DossierClient", b =>
                {
                    b.Navigation("InfoSanteClients");

                    b.Navigation("PretAccord");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.Employeur", b =>
                {
                    b.Navigation("PretAccords");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.EtapeDeroulement", b =>
                {
                    b.Navigation("Statuts");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.NatureQuestion", b =>
                {
                    b.Navigation("InfoSanteClient");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.OrganeDecision", b =>
                {
                    b.Navigation("Membres");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.PeriodicitePaiement", b =>
                {
                    b.Navigation("PretAccords");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.StatutMarital", b =>
                {
                    b.Navigation("Dossiers");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Loan_Management.TypePret", b =>
                {
                    b.Navigation("Deroulements");

                    b.Navigation("PretAccords");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Application", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Departement", b =>
                {
                    b.Navigation("Employes");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Direction", b =>
                {
                    b.Navigation("Departements");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.HabilitationProfil", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Menu", b =>
                {
                    b.Navigation("SousMenus");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Profil", b =>
                {
                    b.Navigation("Habilitation");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.TypeJournal", b =>
                {
                    b.Navigation("Journaux");
                });

            modelBuilder.Entity("LoanManagement.core.Models.Users_Management.Utilisateur", b =>
                {
                    b.Navigation("Employe");

                    b.Navigation("Membres");

                    b.Navigation("Passwords");
                });
#pragma warning restore 612, 618
        }
    }
}
